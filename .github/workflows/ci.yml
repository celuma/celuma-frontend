name: ci

on:
  push:
    branches:
      - main
    tags:
      - "v*"

jobs:
  docker-build-main:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write           # keep GHCR publishing
      id-token: write           # needed for AWS OIDC

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU (multi-arch emulation)
        uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      # --- GHCR login (kept as-is) ---
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- NEW: Configure AWS OIDC credentials for ECR push ---
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::385511156241:role/GitHubActionsECRPushRole
          aws-region: mx-central-1

      # --- NEW: Login to Amazon ECR (captures registry URL) ---
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image (main branch â†’ GHCR + ECR STG)
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            VITE_API_BASE_URL=${{ vars.VITE_API_BASE_URL || '/api' }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:main
            ghcr.io/${{ github.repository }}:latest
            ${{ steps.login-ecr.outputs.registry }}/celuma-stg/celuma-frontend:stg-${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/celuma-stg/celuma-frontend:stg-latest
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref=${{ github.ref }}
            org.opencontainers.image.title=Main-Branch-Image
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output main branch image reference
        run: |
          echo "### ðŸš€ Main Branch Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**GHCR tags:**" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ github.repository }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ github.repository }}:main" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ github.repository }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ECR (stg) tags:**" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ steps.login-ecr.outputs.registry }}/celuma-stg/celuma-frontend:stg-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ steps.login-ecr.outputs.registry }}/celuma-stg/celuma-frontend:stg-latest" >> $GITHUB_STEP_SUMMARY

  docker-release:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: read
      packages: write           # keep GHCR publishing
      id-token: write           # needed for AWS OIDC

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU (multi-arch emulation)
        uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      # --- GHCR login (kept as-is) ---
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- NEW: Configure AWS OIDC credentials for ECR push ---
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::385511156241:role/GitHubActionsECRPushRole
          aws-region: mx-central-1

      # --- NEW: Login to Amazon ECR (captures registry URL) ---
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract release version
        id: release_version
        run: |
          # Strip leading 'v' (e.g. v1.2.3 -> 1.2.3)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=$VERSION" >> $GITHUB_ENV

      - name: Build and push Docker image (tag â†’ GHCR + ECR PROD)
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            VITE_API_BASE_URL=${{ vars.VITE_API_BASE_URL || '/api' }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ghcr.io/${{ github.repository }}:${{ steps.release_version.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
            ${{ steps.login-ecr.outputs.registry }}/celuma/celuma-frontend:${{ github.ref_name }}
            ${{ steps.login-ecr.outputs.registry }}/celuma/celuma-frontend:${{ steps.release_version.outputs.version }}
            ${{ steps.login-ecr.outputs.registry }}/celuma/celuma-frontend:latest
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref=${{ github.ref }}
            org.opencontainers.image.title=Release-${{ github.ref_name }}
            org.opencontainers.image.version=${{ steps.release_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output release image reference
        run: |
          echo "### ðŸŽ‰ Release Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**GHCR tags:**" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ github.repository }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ github.repository }}:${{ steps.release_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ github.repository }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ECR (prod) tags:**" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ steps.login-ecr.outputs.registry }}/celuma/celuma-frontend:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ steps.login-ecr.outputs.registry }}/celuma/celuma-frontend:${{ steps.release_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ steps.login-ecr.outputs.registry }}/celuma/celuma-frontend:latest" >> $GITHUB_STEP_SUMMARY
          